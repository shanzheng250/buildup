索引
    索引数据结构演变过程
    聚集索引
    最优左匹配
    联合索引
    覆盖索引
    数据离散性
    mysam和innodb索引机制

   索引是什么？
    索引是一种数据结构，为了方便数据库更好的查询


   索引的类型？
     寻常索引，唯一索引，主键索引
     唯一索引指该列没有重复字段
     主键索引是特殊的唯一索引，指没有空值

   索引的演变方式？
       二分查找数据 -》
       二叉树 （容易发生数据偏移，最多的时候会变成o(n) 链表）->
       avl 平衡二叉树 （左右子树差距内容为1，但是innodb有数据页的概念，每个节点上有数据、地址和左右子树存储一个数据页(16k)浪费空间）
       B数 多路平衡树 （一个上有多路的存储，存储在数据页上。但是会导致树的高度相对较高，）
       B+树 为了减少IO次数 page页不存数据数据存储在子节点上，并且形成了数据链表。因此mysql一般只有3层的树足够使用


   为什么不用红黑树？
        红黑树是最长子节点是不超过最短的2倍，不均匀


   innodb的索引文件结构
    frm 表结构
    idb 数据索引一起

   mysiam的索引文件结构
    frm 表结构
    xxx.d 数据
    xxx.i 索引

   什么是聚集索引，非聚集索引，主键索引和辅助索引，覆盖索引
    聚集索引是主键的逻辑存储结构和物理存储结构是一致的。mysql里面聚集索引就是主键索引
    非聚集索引是二次索引，存储字段和主键的关系，通过查询对应的主键再二次查询聚集索引 ---》回表
    覆盖索引是在查询非聚集索引的时候，查询的列正好是响应的主键索引值
      ex: select id from user where name ="sz"   id主键 name为非聚集索引，这时不用回表
      select name from user where name =“sz” and phone ="123" 当name 和phone 为联合索引时这里也是覆盖索引


   主键索引和辅助索引的存储结构？
    主见索引存储的事数据列
    辅助索引时主键数据值

   辅助索引为什么不存地址呢？
        地址会变化

   没有主键的时候怎么办？
        mysql会默认生成一个_rowid

   是不是每个字段都需要建立索引？
        查询多的
        离散高的，不然会全表扫描


   联合索引 最左匹配，不能中断