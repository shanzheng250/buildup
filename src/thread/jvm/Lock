锁量级
 重量级锁
 轻量级锁
        线程尝试使用CAS将对象头中的Mark Word替换为指向锁记录的指针。如果成功，当前线程获得锁，如果失
        败，表示其他线程竞争锁，当前线程便尝试使用自旋来获取锁
 偏向锁
        1、测试当前线程是否和MARK WORLD相同，相同获取锁。
        2、不同测试MARK WORLD的偏向锁标识是否为1，为1，吧当前锁设置为当前线程
        3、不为1则使用CAS竞争设置当前锁
 无锁


CAS问题
    1、ABA问题
    2、循环时间长开销大
    3、单一变量的cas操作


 happens before
 影响结果的禁止
 不影响结果的不一定以什么顺序执行

-----------------------------------------JUC包-----------------------------------------------------
首先，声明共享变量为volatile
然后，使用CAS的原子条件更新来实现线程之间的同步
同时，配合以volatile的读/写和CAS所具有的volatile读和写的内存语义来实现线程之间的通信


--------------------------------------double check 的错误原因 ----------------------------------
 private static Instant instant;
 public static Instant getInstant(){
    if(instant!=null){
        sychonized(this){
            if(instant!=null){
                instant = new Instant()              // error
            }
        }
    }
 }

 erro 处代码错误
 原因为：对象创建的步骤
 1、分配内存
 2、初始化对象
 3、对象指针指向内存
 2 和 3会产生指令重排序，即23顺序不定

 若线程A到error处 执行创建的对象的顺序为 1->3->2 在执行到3步奏时，线程B执行到判断instant!=null 此时instant对象尚未初始化，所以会有两个对象


 解决方案：禁止创建对象指令的重排序   -> volatile 对象


 JVM在类的初始化阶段（即在Class被加载后，且被线程使用之前），会执行类的初始化。在执行类的初始化期间，JVM会去获取一个锁。这个锁可以同步多个线程对同一个类的初始化
    public  class Instant {
       //使用静态内部类
    private static class staticDemo {
        private static Instant instant =new Instant();
    }
    public static Instant getInstant(){
        return  staticDemo.instant;
    }
}









